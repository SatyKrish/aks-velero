apiVersion: v1
kind: Namespace
metadata:
  name: azure-vote
  labels:
    app: azure-vote
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: azure-vote-back
  namespace: azure-vote
  labels:
    app: azure-vote
spec:
  storageClassName: managed-premium
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: azure-vote
  labels:
    app: azure-vote
    tier: backend
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote
      tier: backend
  template:
    metadata:
      labels:
        app: azure-vote
        tier: backend
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: redis:5.0.8
        args: ["--appendonly", "yes", "--save", "900", "1", "--save", "30", "2"]
        ports:
        - name: redis
          containerPort: 6379
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: azure-vote-back
          mountPath: /data
      volumes:
      - name: azure-vote-back
        persistentVolumeClaim:
          claimName: azure-vote-back
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: azure-vote
  labels:
    app: azure-vote
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: azure-vote
    tier: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: azure-vote
  labels:
    app: azure-vote
    tier: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote
      tier: frontend
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 
  template:
    metadata:
      labels:
        app: azure-vote
        tier: frontend
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: aksworkshop/azure-vote-front:2.0
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /healthz/live
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 1
        env:
        - name: REDIS_SERVER
          value: "azure-vote-back"
        - name: REDIS_PORT
          value: "6379"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: azure-vote
  labels:
    app: azure-vote
spec:
  type: ClusterIP
  ports:
  - port: 80
  selector:
    app: azure-vote
    tier: frontend
---
apiVersion: v1
kind: Secret
metadata:
  name: azure-vote-front-tls-cert
  namespace: azure-vote
  labels:
    app: azure-vote
type: kubernetes.io/tls
data:
  tls.crt: <base64-encoded-tls-cert>
  tls.key: <base64-encoded-tls-key>
---
apiVersion: extensions/v1beta1
kind: Ingress 
metadata: 
  name: azure-vote-front
  namespace: azure-vote
  labels:
    app: azure-vote
  annotations: 
    kubernetes.io/ingress.class: nginx
    kubernetes.io/ingress.allow-http: "false" # MANDATORY: Only https traffic allowed. Enforced by Azure policy
    nginx.ingress.kubernetes.io/ssl-redirect: "false" 
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  tls:  # MANDATORY: Only https traffic allowed. Enforced by Azure policy
  - hosts:
    - <your-host-name>
    secretName: ingress-tls-cert  # the secret holding TLS certificates
  rules: 
  - host: <your-host-name>
    http: 
      paths: 
        - backend: 
            serviceName: azure-vote-front
            servicePort: 80 
          path: "/(.*)"
